{
  "version": 3,
  "sources": ["../pricing-update.js"],
  "sourcesContent": ["/**\n * Improved Pricing Toggle Script\n *\n * This script handles the pricing toggle functionality for switching between monthly and annual pricing.\n * Improvements include:\n * - Better code organization with ES6+ features\n * - Improved error handling and logging\n * - Reduced code duplication\n * - Better performance with fewer DOM queries\n * - More maintainable structure with clear separation of concerns\n */\n\n// Pricing configuration is expected to be defined in global-pricing-declarations.js\n// Make sure pricing and billingDetails objects are available before this script runs\n\nclass PricingManager {\n  constructor() {\n    this.cards = document.querySelectorAll(\".new-pricing-card\");\n    this.toggles = document.querySelectorAll(\".pricing-chart_toggle-container\");\n    this.isMonthlyPricing = false;\n\n    this.init();\n  }\n\n  init() {\n    // Initialize all cards with annual pricing by default\n    this.updateAllCards(false);\n\n    // Add event listeners to toggles\n    this.setupToggleListeners();\n\n    console.log(\"Pricing manager initialized with\", this.cards.length, \"pricing cards\");\n  }\n\n  setupToggleListeners() {\n    this.toggles.forEach((toggle) => {\n      toggle.addEventListener(\"click\", () => {\n        // Toggle the pricing state\n        this.isMonthlyPricing = !this.isMonthlyPricing;\n\n        // Update all toggles to match the current state\n        this.syncAllToggles();\n\n        // Update all pricing cards\n        this.updateAllCards(this.isMonthlyPricing);\n      });\n    });\n  }\n\n  syncAllToggles() {\n    this.toggles.forEach((toggle) => {\n      if (this.isMonthlyPricing) {\n        toggle.classList.add(\"is-active\");\n      } else {\n        toggle.classList.remove(\"is-active\");\n      }\n    });\n  }\n\n  getCardType(card) {\n    const cardTypeElement = card.querySelector(\".n-pricing-plan-type.new h3\");\n    if (!cardTypeElement) {\n      console.warn(\"Card type element not found\");\n      return null;\n    }\n\n    let cardType = cardTypeElement.textContent.trim();\n\n    // Check if the cardType exists in the pricing object, if not, try to match\n    if (!pricing[cardType]) {\n      const pricingKeys = Object.keys(pricing);\n      const matchedType = pricingKeys.find((key) => key.includes(cardType));\n\n      if (!matchedType) {\n        console.warn(`Pricing not found for card type: ${cardType}`);\n        return null;\n      }\n\n      return matchedType;\n    }\n\n    return cardType;\n  }\n\n  updateCard(card, isMonthly) {\n    const cardType = this.getCardType(card);\n    if (!cardType) return;\n\n    // Get all required elements once\n    const elements = {\n      pricePerMonth: card.querySelector(\".price-per-term .price-per-month\"),\n      billingCycleLabel: card.querySelector(\".billing-cycle-label\"),\n      planTermDetails: card.querySelector(\".plan-pricing-wrap .plan-term-details\"),\n      savePercent: card.querySelector(\".save-x-percent\"),\n      monthlyDetails: card.querySelector('.bottom-price-details[plan-type=\"monthly\"]'),\n      annualDetails: card.querySelector('.bottom-price-details[plan-type=\"annual\"]'),\n      toggle: card.querySelector(\".pricing-chart_toggle-container\"),\n    };\n\n    // Check if required elements exist\n    if (!elements.pricePerMonth || !elements.billingCycleLabel || !elements.planTermDetails) {\n      console.warn(\"Required pricing elements not found for card:\", cardType);\n      return;\n    }\n\n    if (isMonthly) {\n      this.applyMonthlyPricing(elements, cardType);\n    } else {\n      this.applyAnnualPricing(elements, cardType);\n    }\n  }\n\n  applyMonthlyPricing(elements, cardType) {\n    elements.pricePerMonth.textContent = pricing[cardType].monthly;\n    elements.billingCycleLabel.textContent = \"Monthly Plan\";\n    elements.planTermDetails.textContent = billingDetails.monthly;\n\n    // Update save percent element to gray\n    if (elements.savePercent) {\n      elements.savePercent.style.color = \"#aaa\";\n    }\n\n    // Show monthly bottom price details and hide annual\n    if (elements.monthlyDetails) elements.monthlyDetails.style.display = \"block\";\n    if (elements.annualDetails) elements.annualDetails.style.display = \"none\";\n\n    // Update toggle state\n    if (elements.toggle) {\n      elements.toggle.classList.add(\"is-active\");\n    }\n  }\n\n  applyAnnualPricing(elements, cardType) {\n    elements.pricePerMonth.textContent = pricing[cardType].annually;\n    elements.billingCycleLabel.textContent = \"Annual Plan\";\n    elements.planTermDetails.textContent = billingDetails.annually[cardType];\n\n    // Update save percent element to default green\n    if (elements.savePercent) {\n      elements.savePercent.style.color = \"\";\n    }\n\n    // Show annual bottom price details and hide monthly\n    if (elements.monthlyDetails) elements.monthlyDetails.style.display = \"none\";\n    if (elements.annualDetails) elements.annualDetails.style.display = \"block\";\n\n    // Update toggle state\n    if (elements.toggle) {\n      elements.toggle.classList.remove(\"is-active\");\n    }\n  }\n\n  updateAllCards(isMonthly) {\n    this.cards.forEach((card) => this.updateCard(card, isMonthly));\n  }\n}\n\n// Initialize the pricing manager when the DOM is fully loaded\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Check if required global variables exist\n  if (typeof pricing === \"undefined\" || typeof billingDetails === \"undefined\") {\n    console.error(\"Pricing data not found. Make sure global-pricing-declarations.js is loaded before this script.\");\n    return;\n  }\n\n  // Initialize the pricing manager\n  const pricingManager = new PricingManager();\n});\n"],
  "mappings": "AAeA,IAAMA,EAAN,KAAqB,CACnB,aAAc,CACZ,KAAK,MAAQ,SAAS,iBAAiB,mBAAmB,EAC1D,KAAK,QAAU,SAAS,iBAAiB,iCAAiC,EAC1E,KAAK,iBAAmB,GAExB,KAAK,KAAK,CACZ,CAEA,MAAO,CAEL,KAAK,eAAe,EAAK,EAGzB,KAAK,qBAAqB,EAE1B,QAAQ,IAAI,mCAAoC,KAAK,MAAM,OAAQ,eAAe,CACpF,CAEA,sBAAuB,CACrB,KAAK,QAAQ,QAASC,GAAW,CAC/BA,EAAO,iBAAiB,QAAS,IAAM,CAErC,KAAK,iBAAmB,CAAC,KAAK,iBAG9B,KAAK,eAAe,EAGpB,KAAK,eAAe,KAAK,gBAAgB,CAC3C,CAAC,CACH,CAAC,CACH,CAEA,gBAAiB,CACf,KAAK,QAAQ,QAASA,GAAW,CAC3B,KAAK,iBACPA,EAAO,UAAU,IAAI,WAAW,EAEhCA,EAAO,UAAU,OAAO,WAAW,CAEvC,CAAC,CACH,CAEA,YAAYC,EAAM,CAChB,IAAMC,EAAkBD,EAAK,cAAc,6BAA6B,EACxE,GAAI,CAACC,EACH,eAAQ,KAAK,6BAA6B,EACnC,KAGT,IAAIC,EAAWD,EAAgB,YAAY,KAAK,EAGhD,GAAI,CAAC,QAAQC,CAAQ,EAAG,CAEtB,IAAMC,EADc,OAAO,KAAK,OAAO,EACP,KAAMC,GAAQA,EAAI,SAASF,CAAQ,CAAC,EAEpE,OAAKC,IACH,QAAQ,KAAK,oCAAoCD,CAAQ,EAAE,EACpD,KAIX,CAEA,OAAOA,CACT,CAEA,WAAWF,EAAMK,EAAW,CAC1B,IAAMH,EAAW,KAAK,YAAYF,CAAI,EACtC,GAAI,CAACE,EAAU,OAGf,IAAMI,EAAW,CACf,cAAeN,EAAK,cAAc,kCAAkC,EACpE,kBAAmBA,EAAK,cAAc,sBAAsB,EAC5D,gBAAiBA,EAAK,cAAc,uCAAuC,EAC3E,YAAaA,EAAK,cAAc,iBAAiB,EACjD,eAAgBA,EAAK,cAAc,4CAA4C,EAC/E,cAAeA,EAAK,cAAc,2CAA2C,EAC7E,OAAQA,EAAK,cAAc,iCAAiC,CAC9D,EAGA,GAAI,CAACM,EAAS,eAAiB,CAACA,EAAS,mBAAqB,CAACA,EAAS,gBAAiB,CACvF,QAAQ,KAAK,gDAAiDJ,CAAQ,EACtE,MACF,CAEIG,EACF,KAAK,oBAAoBC,EAAUJ,CAAQ,EAE3C,KAAK,mBAAmBI,EAAUJ,CAAQ,CAE9C,CAEA,oBAAoBI,EAAUJ,EAAU,CACtCI,EAAS,cAAc,YAAc,QAAQJ,CAAQ,EAAE,QACvDI,EAAS,kBAAkB,YAAc,eACzCA,EAAS,gBAAgB,YAAc,eAAe,QAGlDA,EAAS,cACXA,EAAS,YAAY,MAAM,MAAQ,QAIjCA,EAAS,iBAAgBA,EAAS,eAAe,MAAM,QAAU,SACjEA,EAAS,gBAAeA,EAAS,cAAc,MAAM,QAAU,QAG/DA,EAAS,QACXA,EAAS,OAAO,UAAU,IAAI,WAAW,CAE7C,CAEA,mBAAmBA,EAAUJ,EAAU,CACrCI,EAAS,cAAc,YAAc,QAAQJ,CAAQ,EAAE,SACvDI,EAAS,kBAAkB,YAAc,cACzCA,EAAS,gBAAgB,YAAc,eAAe,SAASJ,CAAQ,EAGnEI,EAAS,cACXA,EAAS,YAAY,MAAM,MAAQ,IAIjCA,EAAS,iBAAgBA,EAAS,eAAe,MAAM,QAAU,QACjEA,EAAS,gBAAeA,EAAS,cAAc,MAAM,QAAU,SAG/DA,EAAS,QACXA,EAAS,OAAO,UAAU,OAAO,WAAW,CAEhD,CAEA,eAAeD,EAAW,CACxB,KAAK,MAAM,QAASL,GAAS,KAAK,WAAWA,EAAMK,CAAS,CAAC,CAC/D,CACF,EAGA,SAAS,iBAAiB,mBAAoB,IAAM,CAElD,GAAI,OAAO,QAAY,KAAe,OAAO,eAAmB,IAAa,CAC3E,QAAQ,MAAM,gGAAgG,EAC9G,MACF,CAGA,IAAME,EAAiB,IAAIT,CAC7B,CAAC",
  "names": ["PricingManager", "toggle", "card", "cardTypeElement", "cardType", "matchedType", "key", "isMonthly", "elements", "pricingManager"]
}
