{
  "version": 3,
  "sources": ["../pricing-swap.js"],
  "sourcesContent": ["// Function to update pricing\nfunction updatePricing(card) {\n  // Get the card type\n  const cardTypeElement = card.querySelector(\".n-pricing-plan-type.new h3\");\n  if (!cardTypeElement) {\n    console.log(\"Card type element not found\");\n    return;\n  }\n  let cardType = cardTypeElement.textContent.trim();\n\n  // Check if the cardType exists in the pricing object, if not, try to match\n  if (!pricing[cardType]) {\n    const pricingKeys = Object.keys(pricing);\n    cardType = pricingKeys.find((key) => key.includes(cardType));\n    if (!cardType) {\n      console.log(`Pricing not found for card type: ${cardType}`);\n      return;\n    }\n  }\n\n  // Get the price per month element\n  const pricePerMonth = card.querySelector(\".price-per-term .price-per-month\");\n  if (!pricePerMonth) {\n    console.log(\"Price per month element not found\");\n    return;\n  }\n\n  // Get the billing cycle label element\n  const billingCycleLabel = card.querySelector(\".billing-cycle-label\");\n  if (!billingCycleLabel) {\n    console.log(\"Billing cycle label element not found\");\n    return;\n  }\n\n  // Get the plan term details element\n  const planTermDetails = card.querySelector(\".plan-pricing-wrap .plan-term-details\");\n  if (!planTermDetails) {\n    console.log(\"Plan term details element not found\");\n    return;\n  }\n\n  // Update to monthly\n  pricePerMonth.textContent = pricing[cardType].monthly;\n  billingCycleLabel.textContent = \"Monthly Plan\";\n  planTermDetails.textContent = billingDetails.monthly;\n\n  // Update the toggle\n  const toggle = card.querySelector(\".plan-toggle\");\n  if (toggle) {\n    toggle.classList.remove(\"is-active\");\n  }\n}\n\n// Update pricing on page load\ndocument.querySelectorAll(\".new-pricing-card\").forEach(updatePricing);\n\n// Select all toggles\nconst toggles = document.querySelectorAll(\".pricing-chart_toggle-container\");\n\n// Function to update all pricing cards\nfunction updateAllPricingCards(isAnnual) {\n  document.querySelectorAll(\".new-pricing-card\").forEach((card) => {\n    const cardTypeElement = card.querySelector(\".n-pricing-plan-type.new h3\");\n    if (!cardTypeElement) {\n      console.log(\"Card type element not found\");\n      return;\n    }\n    let cardType = cardTypeElement.textContent.trim();\n\n    // Check if the cardType exists in the pricing object, if not, try to match\n    if (!pricing[cardType]) {\n      const pricingKeys = Object.keys(pricing);\n      cardType = pricingKeys.find((key) => key.includes(cardType));\n      if (!cardType) {\n        console.log(`Pricing not found for card type: ${cardType}`);\n        return;\n      }\n    }\n\n    const pricePerMonth = card.querySelector(\".price-per-term .price-per-month\");\n    const billingCycleLabel = card.querySelector(\".billing-cycle-label\");\n    const planTermDetails = card.querySelector(\".plan-pricing-wrap .plan-term-details\");\n    const toggle = card.querySelector(\".pricing-chart_toggle-container\");\n\n    if (isMonthly) {\n      pricePerMonth.textContent = pricing[cardType].monthly;\n      billingCycleLabel.textContent = \"Monthly Plan\";\n      planTermDetails.textContent = billingDetails.monthly;\n      toggle.classList.add(\"is-active\");\n\n      // Update save percent element to gray\n      const savePercent = card.querySelector(\".save-x-percent\");\n      if (savePercent) {\n        savePercent.style.color = \"#aaa\";\n      }\n\n      // // Update compare-at price for monthly\n      // const compareAtPrice = card.querySelector(\".compare-at-price\");\n      // if (compareAtPrice && pricing[cardType].compare_monthly) {\n      //   compareAtPrice.textContent = pricing[cardType].compare_monthly;\n      // }\n\n      // Show monthly bottom price details and hide annual\n      const monthlyDetails = card.querySelector('.bottom-price-details[plan-type=\"monthly\"]');\n      const annualDetails = card.querySelector('.bottom-price-details[plan-type=\"annual\"]');\n      if (monthlyDetails) monthlyDetails.style.display = \"block\";\n      if (annualDetails) annualDetails.style.display = \"none\";\n    } else {\n      pricePerMonth.textContent = pricing[cardType].annually;\n      billingCycleLabel.textContent = \"Annual Plan\";\n      planTermDetails.textContent = billingDetails.annually[cardType];\n      toggle.classList.remove(\"is-active\");\n\n      // Update save percent element to default green\n      const savePercent = card.querySelector(\".save-x-percent\");\n      if (savePercent) {\n        savePercent.style.color = \"\";\n      }\n\n      // // Update compare-at price for annual\n      // const compareAtPrice = card.querySelector(\".compare-at-price\");\n      // if (compareAtPrice && pricing[cardType].compare_annual) {\n      //   compareAtPrice.textContent = pricing[cardType].compare_annual;\n      // }\n\n      // Show annual bottom price details and hide monthly\n      const monthlyDetails = card.querySelector('.bottom-price-details[plan-type=\"monthly\"]');\n      const annualDetails = card.querySelector('.bottom-price-details[plan-type=\"annual\"]');\n      if (monthlyDetails) monthlyDetails.style.display = \"none\";\n      if (annualDetails) annualDetails.style.display = \"block\";\n    }\n  });\n\n  // Update all toggle states\n  toggles.forEach((toggle) => {\n    if (isMonthly) {\n      toggle.classList.add(\"is-active\");\n    } else {\n      pricePerMonth.textContent = pricing[cardType].monthly;\n      billingCycleLabel.textContent = \"Monthly Plan\";\n      planTermDetails.textContent = billingDetails.monthly;\n      toggle.classList.remove(\"is-active\");\n    }\n  });\n}\n\n// Add click event listener to all toggles\ntoggles.forEach((toggle) => {\n  toggle.addEventListener(\"click\", function () {\n    const isActive = this.classList.contains(\"is-active\");\n    const newState = !isActive;\n\n    // Update all toggles\n    toggles.forEach((otherToggle) => {\n      if (otherToggle !== this) {\n        // Simulate a click on other toggles\n        otherToggle.click();\n      }\n    });\n\n    // Update all pricing cards\n    updateAllPricingCards(newState);\n  });\n});\n\n// Update pricing on page load\nupdateAllPricingCards(false);\n"],
  "mappings": "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",
  "names": ["updatePricing", "card", "cardTypeElement", "cardType", "key", "pricePerMonth", "billingCycleLabel", "planTermDetails", "toggle", "toggles", "updateAllPricingCards", "isAnnual", "savePercent", "monthlyDetails", "annualDetails", "newState", "otherToggle"]
}
